// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: streaming/v1/streaming.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServerStreamingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerStreamingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerStreamingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerStreamingRequestMultiError, or nil if none found.
func (m *ServerStreamingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerStreamingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return ServerStreamingRequestMultiError(errors)
	}

	return nil
}

// ServerStreamingRequestMultiError is an error wrapping multiple validation
// errors returned by ServerStreamingRequest.ValidateAll() if the designated
// constraints aren't met.
type ServerStreamingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerStreamingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerStreamingRequestMultiError) AllErrors() []error { return m }

// ServerStreamingRequestValidationError is the validation error returned by
// ServerStreamingRequest.Validate if the designated constraints aren't met.
type ServerStreamingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerStreamingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerStreamingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerStreamingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerStreamingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerStreamingRequestValidationError) ErrorName() string {
	return "ServerStreamingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerStreamingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerStreamingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerStreamingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerStreamingRequestValidationError{}

// Validate checks the field values on ServerStreamingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerStreamingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerStreamingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerStreamingResponseMultiError, or nil if none found.
func (m *ServerStreamingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerStreamingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return ServerStreamingResponseMultiError(errors)
	}

	return nil
}

// ServerStreamingResponseMultiError is an error wrapping multiple validation
// errors returned by ServerStreamingResponse.ValidateAll() if the designated
// constraints aren't met.
type ServerStreamingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerStreamingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerStreamingResponseMultiError) AllErrors() []error { return m }

// ServerStreamingResponseValidationError is the validation error returned by
// ServerStreamingResponse.Validate if the designated constraints aren't met.
type ServerStreamingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerStreamingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerStreamingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerStreamingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerStreamingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerStreamingResponseValidationError) ErrorName() string {
	return "ServerStreamingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerStreamingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerStreamingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerStreamingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerStreamingResponseValidationError{}

// Validate checks the field values on ClientStreamingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClientStreamingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientStreamingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientStreamingRequestMultiError, or nil if none found.
func (m *ClientStreamingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientStreamingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ClientStreamingRequestMultiError(errors)
	}

	return nil
}

// ClientStreamingRequestMultiError is an error wrapping multiple validation
// errors returned by ClientStreamingRequest.ValidateAll() if the designated
// constraints aren't met.
type ClientStreamingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientStreamingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientStreamingRequestMultiError) AllErrors() []error { return m }

// ClientStreamingRequestValidationError is the validation error returned by
// ClientStreamingRequest.Validate if the designated constraints aren't met.
type ClientStreamingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientStreamingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientStreamingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientStreamingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientStreamingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientStreamingRequestValidationError) ErrorName() string {
	return "ClientStreamingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClientStreamingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientStreamingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientStreamingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientStreamingRequestValidationError{}

// Validate checks the field values on ClientStreamingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClientStreamingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientStreamingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientStreamingResponseMultiError, or nil if none found.
func (m *ClientStreamingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientStreamingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClientStreamingResponseMultiError(errors)
	}

	return nil
}

// ClientStreamingResponseMultiError is an error wrapping multiple validation
// errors returned by ClientStreamingResponse.ValidateAll() if the designated
// constraints aren't met.
type ClientStreamingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientStreamingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientStreamingResponseMultiError) AllErrors() []error { return m }

// ClientStreamingResponseValidationError is the validation error returned by
// ClientStreamingResponse.Validate if the designated constraints aren't met.
type ClientStreamingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientStreamingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientStreamingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientStreamingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientStreamingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientStreamingResponseValidationError) ErrorName() string {
	return "ClientStreamingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClientStreamingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientStreamingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientStreamingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientStreamingResponseValidationError{}

// Validate checks the field values on BiDirectionalStreamingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BiDirectionalStreamingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BiDirectionalStreamingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BiDirectionalStreamingRequestMultiError, or nil if none found.
func (m *BiDirectionalStreamingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BiDirectionalStreamingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return BiDirectionalStreamingRequestMultiError(errors)
	}

	return nil
}

// BiDirectionalStreamingRequestMultiError is an error wrapping multiple
// validation errors returned by BiDirectionalStreamingRequest.ValidateAll()
// if the designated constraints aren't met.
type BiDirectionalStreamingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BiDirectionalStreamingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BiDirectionalStreamingRequestMultiError) AllErrors() []error { return m }

// BiDirectionalStreamingRequestValidationError is the validation error
// returned by BiDirectionalStreamingRequest.Validate if the designated
// constraints aren't met.
type BiDirectionalStreamingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BiDirectionalStreamingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BiDirectionalStreamingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BiDirectionalStreamingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BiDirectionalStreamingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BiDirectionalStreamingRequestValidationError) ErrorName() string {
	return "BiDirectionalStreamingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BiDirectionalStreamingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBiDirectionalStreamingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BiDirectionalStreamingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BiDirectionalStreamingRequestValidationError{}

// Validate checks the field values on BiDirectionalStreamingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BiDirectionalStreamingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BiDirectionalStreamingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BiDirectionalStreamingResponseMultiError, or nil if none found.
func (m *BiDirectionalStreamingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BiDirectionalStreamingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return BiDirectionalStreamingResponseMultiError(errors)
	}

	return nil
}

// BiDirectionalStreamingResponseMultiError is an error wrapping multiple
// validation errors returned by BiDirectionalStreamingResponse.ValidateAll()
// if the designated constraints aren't met.
type BiDirectionalStreamingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BiDirectionalStreamingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BiDirectionalStreamingResponseMultiError) AllErrors() []error { return m }

// BiDirectionalStreamingResponseValidationError is the validation error
// returned by BiDirectionalStreamingResponse.Validate if the designated
// constraints aren't met.
type BiDirectionalStreamingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BiDirectionalStreamingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BiDirectionalStreamingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BiDirectionalStreamingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BiDirectionalStreamingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BiDirectionalStreamingResponseValidationError) ErrorName() string {
	return "BiDirectionalStreamingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BiDirectionalStreamingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBiDirectionalStreamingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BiDirectionalStreamingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BiDirectionalStreamingResponseValidationError{}
