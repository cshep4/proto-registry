// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: streaming/v1/streaming.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/cshep4/proto-registry/gen/go/streaming/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StreamingServiceName is the fully-qualified name of the StreamingService service.
	StreamingServiceName = "streaming.v1.StreamingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StreamingServiceDownloadFileProcedure is the fully-qualified name of the StreamingService's
	// DownloadFile RPC.
	StreamingServiceDownloadFileProcedure = "/streaming.v1.StreamingService/DownloadFile"
	// StreamingServiceUploadFileProcedure is the fully-qualified name of the StreamingService's
	// UploadFile RPC.
	StreamingServiceUploadFileProcedure = "/streaming.v1.StreamingService/UploadFile"
	// StreamingServiceEchoProcedure is the fully-qualified name of the StreamingService's Echo RPC.
	StreamingServiceEchoProcedure = "/streaming.v1.StreamingService/Echo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	streamingServiceServiceDescriptor            = v1.File_streaming_v1_streaming_proto.Services().ByName("StreamingService")
	streamingServiceDownloadFileMethodDescriptor = streamingServiceServiceDescriptor.Methods().ByName("DownloadFile")
	streamingServiceUploadFileMethodDescriptor   = streamingServiceServiceDescriptor.Methods().ByName("UploadFile")
	streamingServiceEchoMethodDescriptor         = streamingServiceServiceDescriptor.Methods().ByName("Echo")
)

// StreamingServiceClient is a client for the streaming.v1.StreamingService service.
type StreamingServiceClient interface {
	// DownloadFile is a server-streaming RPC method for downloading a file.
	// It takes a filename in the request and streams back the file content in chunks.
	DownloadFile(context.Context, *connect.Request[v1.DownloadFileRequest]) (*connect.ServerStreamForClient[v1.DownloadFileResponse], error)
	// UploadFile is a client-streaming RPC method for uploading a file.
	// It accepts a stream of bytes, which contains chunks of the file content, and
	// returns a generated file ID upon completion.
	UploadFile(context.Context) *connect.ClientStreamForClient[v1.UploadFileRequest, v1.UploadFileResponse]
	// Echo is a bi-directional streaming RPC method.
	// It accepts a stream of messages and echos back received messages in a stream.
	Echo(context.Context) *connect.BidiStreamForClient[v1.EchoRequest, v1.EchoResponse]
}

// NewStreamingServiceClient constructs a client for the streaming.v1.StreamingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStreamingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StreamingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &streamingServiceClient{
		downloadFile: connect.NewClient[v1.DownloadFileRequest, v1.DownloadFileResponse](
			httpClient,
			baseURL+StreamingServiceDownloadFileProcedure,
			connect.WithSchema(streamingServiceDownloadFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uploadFile: connect.NewClient[v1.UploadFileRequest, v1.UploadFileResponse](
			httpClient,
			baseURL+StreamingServiceUploadFileProcedure,
			connect.WithSchema(streamingServiceUploadFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		echo: connect.NewClient[v1.EchoRequest, v1.EchoResponse](
			httpClient,
			baseURL+StreamingServiceEchoProcedure,
			connect.WithSchema(streamingServiceEchoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// streamingServiceClient implements StreamingServiceClient.
type streamingServiceClient struct {
	downloadFile *connect.Client[v1.DownloadFileRequest, v1.DownloadFileResponse]
	uploadFile   *connect.Client[v1.UploadFileRequest, v1.UploadFileResponse]
	echo         *connect.Client[v1.EchoRequest, v1.EchoResponse]
}

// DownloadFile calls streaming.v1.StreamingService.DownloadFile.
func (c *streamingServiceClient) DownloadFile(ctx context.Context, req *connect.Request[v1.DownloadFileRequest]) (*connect.ServerStreamForClient[v1.DownloadFileResponse], error) {
	return c.downloadFile.CallServerStream(ctx, req)
}

// UploadFile calls streaming.v1.StreamingService.UploadFile.
func (c *streamingServiceClient) UploadFile(ctx context.Context) *connect.ClientStreamForClient[v1.UploadFileRequest, v1.UploadFileResponse] {
	return c.uploadFile.CallClientStream(ctx)
}

// Echo calls streaming.v1.StreamingService.Echo.
func (c *streamingServiceClient) Echo(ctx context.Context) *connect.BidiStreamForClient[v1.EchoRequest, v1.EchoResponse] {
	return c.echo.CallBidiStream(ctx)
}

// StreamingServiceHandler is an implementation of the streaming.v1.StreamingService service.
type StreamingServiceHandler interface {
	// DownloadFile is a server-streaming RPC method for downloading a file.
	// It takes a filename in the request and streams back the file content in chunks.
	DownloadFile(context.Context, *connect.Request[v1.DownloadFileRequest], *connect.ServerStream[v1.DownloadFileResponse]) error
	// UploadFile is a client-streaming RPC method for uploading a file.
	// It accepts a stream of bytes, which contains chunks of the file content, and
	// returns a generated file ID upon completion.
	UploadFile(context.Context, *connect.ClientStream[v1.UploadFileRequest]) (*connect.Response[v1.UploadFileResponse], error)
	// Echo is a bi-directional streaming RPC method.
	// It accepts a stream of messages and echos back received messages in a stream.
	Echo(context.Context, *connect.BidiStream[v1.EchoRequest, v1.EchoResponse]) error
}

// NewStreamingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStreamingServiceHandler(svc StreamingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	streamingServiceDownloadFileHandler := connect.NewServerStreamHandler(
		StreamingServiceDownloadFileProcedure,
		svc.DownloadFile,
		connect.WithSchema(streamingServiceDownloadFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamingServiceUploadFileHandler := connect.NewClientStreamHandler(
		StreamingServiceUploadFileProcedure,
		svc.UploadFile,
		connect.WithSchema(streamingServiceUploadFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamingServiceEchoHandler := connect.NewBidiStreamHandler(
		StreamingServiceEchoProcedure,
		svc.Echo,
		connect.WithSchema(streamingServiceEchoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/streaming.v1.StreamingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StreamingServiceDownloadFileProcedure:
			streamingServiceDownloadFileHandler.ServeHTTP(w, r)
		case StreamingServiceUploadFileProcedure:
			streamingServiceUploadFileHandler.ServeHTTP(w, r)
		case StreamingServiceEchoProcedure:
			streamingServiceEchoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStreamingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStreamingServiceHandler struct{}

func (UnimplementedStreamingServiceHandler) DownloadFile(context.Context, *connect.Request[v1.DownloadFileRequest], *connect.ServerStream[v1.DownloadFileResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("streaming.v1.StreamingService.DownloadFile is not implemented"))
}

func (UnimplementedStreamingServiceHandler) UploadFile(context.Context, *connect.ClientStream[v1.UploadFileRequest]) (*connect.Response[v1.UploadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("streaming.v1.StreamingService.UploadFile is not implemented"))
}

func (UnimplementedStreamingServiceHandler) Echo(context.Context, *connect.BidiStream[v1.EchoRequest, v1.EchoResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("streaming.v1.StreamingService.Echo is not implemented"))
}
