// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: streaming/v1/streaming.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamingService_ServerStreaming_FullMethodName        = "/streaming.v1.StreamingService/ServerStreaming"
	StreamingService_ClientStreaming_FullMethodName        = "/streaming.v1.StreamingService/ClientStreaming"
	StreamingService_BiDirectionalStreaming_FullMethodName = "/streaming.v1.StreamingService/BiDirectionalStreaming"
)

// StreamingServiceClient is the client API for StreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingServiceClient interface {
	ServerStreaming(ctx context.Context, in *ServerStreamingRequest, opts ...grpc.CallOption) (StreamingService_ServerStreamingClient, error)
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (StreamingService_ClientStreamingClient, error)
	BiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (StreamingService_BiDirectionalStreamingClient, error)
}

type streamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingServiceClient(cc grpc.ClientConnInterface) StreamingServiceClient {
	return &streamingServiceClient{cc}
}

func (c *streamingServiceClient) ServerStreaming(ctx context.Context, in *ServerStreamingRequest, opts ...grpc.CallOption) (StreamingService_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[0], StreamingService_ServerStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingService_ServerStreamingClient interface {
	Recv() (*ServerStreamingResponse, error)
	grpc.ClientStream
}

type streamingServiceServerStreamingClient struct {
	grpc.ClientStream
}

func (x *streamingServiceServerStreamingClient) Recv() (*ServerStreamingResponse, error) {
	m := new(ServerStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingServiceClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (StreamingService_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[1], StreamingService_ClientStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceClientStreamingClient{stream}
	return x, nil
}

type StreamingService_ClientStreamingClient interface {
	Send(*ClientStreamingRequest) error
	CloseAndRecv() (*ClientStreamingResponse, error)
	grpc.ClientStream
}

type streamingServiceClientStreamingClient struct {
	grpc.ClientStream
}

func (x *streamingServiceClientStreamingClient) Send(m *ClientStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingServiceClientStreamingClient) CloseAndRecv() (*ClientStreamingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingServiceClient) BiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (StreamingService_BiDirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[2], StreamingService_BiDirectionalStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceBiDirectionalStreamingClient{stream}
	return x, nil
}

type StreamingService_BiDirectionalStreamingClient interface {
	Send(*BiDirectionalStreamingRequest) error
	Recv() (*BiDirectionalStreamingResponse, error)
	grpc.ClientStream
}

type streamingServiceBiDirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *streamingServiceBiDirectionalStreamingClient) Send(m *BiDirectionalStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingServiceBiDirectionalStreamingClient) Recv() (*BiDirectionalStreamingResponse, error) {
	m := new(BiDirectionalStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingServiceServer is the server API for StreamingService service.
// All implementations should embed UnimplementedStreamingServiceServer
// for forward compatibility
type StreamingServiceServer interface {
	ServerStreaming(*ServerStreamingRequest, StreamingService_ServerStreamingServer) error
	ClientStreaming(StreamingService_ClientStreamingServer) error
	BiDirectionalStreaming(StreamingService_BiDirectionalStreamingServer) error
}

// UnimplementedStreamingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStreamingServiceServer struct {
}

func (UnimplementedStreamingServiceServer) ServerStreaming(*ServerStreamingRequest, StreamingService_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (UnimplementedStreamingServiceServer) ClientStreaming(StreamingService_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}
func (UnimplementedStreamingServiceServer) BiDirectionalStreaming(StreamingService_BiDirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDirectionalStreaming not implemented")
}

// UnsafeStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingServiceServer will
// result in compilation errors.
type UnsafeStreamingServiceServer interface {
	mustEmbedUnimplementedStreamingServiceServer()
}

func RegisterStreamingServiceServer(s grpc.ServiceRegistrar, srv StreamingServiceServer) {
	s.RegisterService(&StreamingService_ServiceDesc, srv)
}

func _StreamingService_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServiceServer).ServerStreaming(m, &streamingServiceServerStreamingServer{stream})
}

type StreamingService_ServerStreamingServer interface {
	Send(*ServerStreamingResponse) error
	grpc.ServerStream
}

type streamingServiceServerStreamingServer struct {
	grpc.ServerStream
}

func (x *streamingServiceServerStreamingServer) Send(m *ServerStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamingService_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServiceServer).ClientStreaming(&streamingServiceClientStreamingServer{stream})
}

type StreamingService_ClientStreamingServer interface {
	SendAndClose(*ClientStreamingResponse) error
	Recv() (*ClientStreamingRequest, error)
	grpc.ServerStream
}

type streamingServiceClientStreamingServer struct {
	grpc.ServerStream
}

func (x *streamingServiceClientStreamingServer) SendAndClose(m *ClientStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingServiceClientStreamingServer) Recv() (*ClientStreamingRequest, error) {
	m := new(ClientStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamingService_BiDirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServiceServer).BiDirectionalStreaming(&streamingServiceBiDirectionalStreamingServer{stream})
}

type StreamingService_BiDirectionalStreamingServer interface {
	Send(*BiDirectionalStreamingResponse) error
	Recv() (*BiDirectionalStreamingRequest, error)
	grpc.ServerStream
}

type streamingServiceBiDirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *streamingServiceBiDirectionalStreamingServer) Send(m *BiDirectionalStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingServiceBiDirectionalStreamingServer) Recv() (*BiDirectionalStreamingRequest, error) {
	m := new(BiDirectionalStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingService_ServiceDesc is the grpc.ServiceDesc for StreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streaming.v1.StreamingService",
	HandlerType: (*StreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreaming",
			Handler:       _StreamingService_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreaming",
			Handler:       _StreamingService_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiDirectionalStreaming",
			Handler:       _StreamingService_BiDirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streaming/v1/streaming.proto",
}
