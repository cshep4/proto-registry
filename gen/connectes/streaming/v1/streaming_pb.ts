// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file streaming/v1/streaming.proto (package streaming.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file streaming/v1/streaming.proto.
 */
export const file_streaming_v1_streaming: GenFile = /*@__PURE__*/
  fileDesc("ChxzdHJlYW1pbmcvdjEvc3RyZWFtaW5nLnByb3RvEgxzdHJlYW1pbmcudjEiIwoTRG93bmxvYWRGaWxlUmVxdWVzdBIMCgRuYW1lGAEgASgJIicKFERvd25sb2FkRmlsZVJlc3BvbnNlEg8KB2NvbnRlbnQYASABKAwiJAoRVXBsb2FkRmlsZVJlcXVlc3QSDwoHY29udGVudBgBIAEoDCIgChJVcGxvYWRGaWxlUmVzcG9uc2USCgoCaWQYASABKAkiHgoLRWNob1JlcXVlc3QSDwoHbWVzc2FnZRgBIAEoCSIfCgxFY2hvUmVzcG9uc2USDwoHbWVzc2FnZRgBIAEoCTKBAgoQU3RyZWFtaW5nU2VydmljZRJXCgxEb3dubG9hZEZpbGUSIS5zdHJlYW1pbmcudjEuRG93bmxvYWRGaWxlUmVxdWVzdBoiLnN0cmVhbWluZy52MS5Eb3dubG9hZEZpbGVSZXNwb25zZTABElEKClVwbG9hZEZpbGUSHy5zdHJlYW1pbmcudjEuVXBsb2FkRmlsZVJlcXVlc3QaIC5zdHJlYW1pbmcudjEuVXBsb2FkRmlsZVJlc3BvbnNlKAESQQoERWNobxIZLnN0cmVhbWluZy52MS5FY2hvUmVxdWVzdBoaLnN0cmVhbWluZy52MS5FY2hvUmVzcG9uc2UoATABQqkBChBjb20uc3RyZWFtaW5nLnYxQg5TdHJlYW1pbmdQcm90b1ABWjRnaXRodWIuY29tL2NzaGVwNC9wcm90by1yZWdpc3RyeS9nZW4vZ28vc3RyZWFtaW5nL3YxogIDU1hYqgIMU3RyZWFtaW5nLlYxygIMU3RyZWFtaW5nXFYx4gIYU3RyZWFtaW5nXFYxXEdQQk1ldGFkYXRh6gINU3RyZWFtaW5nOjpWMWIGcHJvdG8z");

/**
 * DownloadFileRequest is the request message for downloading a file.
 * It contains the name of the file to be downloaded from the server.
 *
 * @generated from message streaming.v1.DownloadFileRequest
 */
export type DownloadFileRequest = Message<"streaming.v1.DownloadFileRequest"> & {
  /**
   * name is the name of the file to download.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message streaming.v1.DownloadFileRequest.
 * Use `create(DownloadFileRequestSchema)` to create a new message.
 */
export const DownloadFileRequestSchema: GenMessage<DownloadFileRequest> = /*@__PURE__*/
  messageDesc(file_streaming_v1_streaming, 0);

/**
 * DownloadFileResponse is the response message for downloading a file.
 * It contains a chunk of the file content.
 *
 * @generated from message streaming.v1.DownloadFileResponse
 */
export type DownloadFileResponse = Message<"streaming.v1.DownloadFileResponse"> & {
  /**
   * content is a chunk of the file content in bytes.
   *
   * @generated from field: bytes content = 1;
   */
  content: Uint8Array;
};

/**
 * Describes the message streaming.v1.DownloadFileResponse.
 * Use `create(DownloadFileResponseSchema)` to create a new message.
 */
export const DownloadFileResponseSchema: GenMessage<DownloadFileResponse> = /*@__PURE__*/
  messageDesc(file_streaming_v1_streaming, 1);

/**
 * UploadFileRequest is the request message for uploading a file.
 * It contains a chunk of the file content.
 *
 * @generated from message streaming.v1.UploadFileRequest
 */
export type UploadFileRequest = Message<"streaming.v1.UploadFileRequest"> & {
  /**
   * content is a chunk of the file content in bytes.
   *
   * @generated from field: bytes content = 1;
   */
  content: Uint8Array;
};

/**
 * Describes the message streaming.v1.UploadFileRequest.
 * Use `create(UploadFileRequestSchema)` to create a new message.
 */
export const UploadFileRequestSchema: GenMessage<UploadFileRequest> = /*@__PURE__*/
  messageDesc(file_streaming_v1_streaming, 2);

/**
 * UploadFileResponse is the response message after a file upload is complete.
 * It contains an ID that uniquely identifies the uploaded file.
 *
 * @generated from message streaming.v1.UploadFileResponse
 */
export type UploadFileResponse = Message<"streaming.v1.UploadFileResponse"> & {
  /**
   * id is the unique identifier for the uploaded file.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message streaming.v1.UploadFileResponse.
 * Use `create(UploadFileResponseSchema)` to create a new message.
 */
export const UploadFileResponseSchema: GenMessage<UploadFileResponse> = /*@__PURE__*/
  messageDesc(file_streaming_v1_streaming, 3);

/**
 * EchoRequest is the request message for the Echo RPC.
 * It contains a message that will be echoed back by the server.
 *
 * @generated from message streaming.v1.EchoRequest
 */
export type EchoRequest = Message<"streaming.v1.EchoRequest"> & {
  /**
   * message is the message to be echoed.
   *
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message streaming.v1.EchoRequest.
 * Use `create(EchoRequestSchema)` to create a new message.
 */
export const EchoRequestSchema: GenMessage<EchoRequest> = /*@__PURE__*/
  messageDesc(file_streaming_v1_streaming, 4);

/**
 * EchoResponse is the response message for the Echo RPC.
 * It contains the 'message' that was echoed back by the server.
 *
 * @generated from message streaming.v1.EchoResponse
 */
export type EchoResponse = Message<"streaming.v1.EchoResponse"> & {
  /**
   * message is the echoed message.
   *
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message streaming.v1.EchoResponse.
 * Use `create(EchoResponseSchema)` to create a new message.
 */
export const EchoResponseSchema: GenMessage<EchoResponse> = /*@__PURE__*/
  messageDesc(file_streaming_v1_streaming, 5);

/**
 * StreamingService is a gRPC service to demonstrate different types of streaming.
 *
 * @generated from service streaming.v1.StreamingService
 */
export const StreamingService: GenService<{
  /**
   * DownloadFile is a server-streaming RPC method for downloading a file.
   * It takes a filename in the request and streams back the file content in chunks.
   *
   * @generated from rpc streaming.v1.StreamingService.DownloadFile
   */
  downloadFile: {
    methodKind: "server_streaming";
    input: typeof DownloadFileRequestSchema;
    output: typeof DownloadFileResponseSchema;
  },
  /**
   * UploadFile is a client-streaming RPC method for uploading a file.
   * It accepts a stream of bytes, which contains chunks of the file content, and
   * returns a generated file ID upon completion.
   *
   * @generated from rpc streaming.v1.StreamingService.UploadFile
   */
  uploadFile: {
    methodKind: "client_streaming";
    input: typeof UploadFileRequestSchema;
    output: typeof UploadFileResponseSchema;
  },
  /**
   * Echo is a bi-directional streaming RPC method.
   * It accepts a stream of messages and echos back received messages in a stream.
   *
   * @generated from rpc streaming.v1.StreamingService.Echo
   */
  echo: {
    methodKind: "bidi_streaming";
    input: typeof EchoRequestSchema;
    output: typeof EchoResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_streaming_v1_streaming, 0);

