// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts"
// @generated from file streaming/v1/streaming.proto (package streaming.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DownloadFileRequest, DownloadFileResponse, EchoRequest, EchoResponse, UploadFileRequest, UploadFileResponse } from "./streaming_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * StreamingService is a gRPC service to demonstrate different types of streaming.
 *
 * @generated from service streaming.v1.StreamingService
 */
export const StreamingService = {
  typeName: "streaming.v1.StreamingService",
  methods: {
    /**
     * DownloadFile is a server-streaming RPC method for downloading a file.
     * It takes a filename in the request and streams back the file content in chunks.
     *
     * @generated from rpc streaming.v1.StreamingService.DownloadFile
     */
    downloadFile: {
      name: "DownloadFile",
      I: DownloadFileRequest,
      O: DownloadFileResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * UploadFile is a client-streaming RPC method for uploading a file.
     * It accepts a stream of bytes, which contains chunks of the file content, and
     * returns a generated file ID upon completion.
     *
     * @generated from rpc streaming.v1.StreamingService.UploadFile
     */
    uploadFile: {
      name: "UploadFile",
      I: UploadFileRequest,
      O: UploadFileResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * Echo is a bi-directional streaming RPC method.
     * It accepts a stream of messages and echos back received messages in a stream.
     *
     * @generated from rpc streaming.v1.StreamingService.Echo
     */
    echo: {
      name: "Echo",
      I: EchoRequest,
      O: EchoResponse,
      kind: MethodKind.BiDiStreaming,
    },
  }
} as const;

