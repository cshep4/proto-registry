# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from streaming.v1 import streaming_pb2 as streaming_dot_v1_dot_streaming__pb2


class StreamingServiceStub(object):
    """StreamingService is a gRPC service to demonstrate different types of streaming.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DownloadFile = channel.unary_stream(
                '/streaming.v1.StreamingService/DownloadFile',
                request_serializer=streaming_dot_v1_dot_streaming__pb2.DownloadFileRequest.SerializeToString,
                response_deserializer=streaming_dot_v1_dot_streaming__pb2.DownloadFileResponse.FromString,
                )
        self.UploadFile = channel.stream_unary(
                '/streaming.v1.StreamingService/UploadFile',
                request_serializer=streaming_dot_v1_dot_streaming__pb2.UploadFileRequest.SerializeToString,
                response_deserializer=streaming_dot_v1_dot_streaming__pb2.UploadFileResponse.FromString,
                )
        self.Echo = channel.stream_stream(
                '/streaming.v1.StreamingService/Echo',
                request_serializer=streaming_dot_v1_dot_streaming__pb2.EchoRequest.SerializeToString,
                response_deserializer=streaming_dot_v1_dot_streaming__pb2.EchoResponse.FromString,
                )


class StreamingServiceServicer(object):
    """StreamingService is a gRPC service to demonstrate different types of streaming.
    """

    def DownloadFile(self, request, context):
        """DownloadFile is a server-streaming RPC method for downloading a file.
        It takes a filename in the request and streams back the file content in chunks.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request_iterator, context):
        """UploadFile is a client-streaming RPC method for uploading a file.
        It accepts a stream of bytes, which contains chunks of the file content, and
        returns a generated file ID upon completion.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Echo(self, request_iterator, context):
        """Echo is a bi-directional streaming RPC method.
        It accepts a stream of messages and echos back received messages in a stream.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DownloadFile': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=streaming_dot_v1_dot_streaming__pb2.DownloadFileRequest.FromString,
                    response_serializer=streaming_dot_v1_dot_streaming__pb2.DownloadFileResponse.SerializeToString,
            ),
            'UploadFile': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=streaming_dot_v1_dot_streaming__pb2.UploadFileRequest.FromString,
                    response_serializer=streaming_dot_v1_dot_streaming__pb2.UploadFileResponse.SerializeToString,
            ),
            'Echo': grpc.stream_stream_rpc_method_handler(
                    servicer.Echo,
                    request_deserializer=streaming_dot_v1_dot_streaming__pb2.EchoRequest.FromString,
                    response_serializer=streaming_dot_v1_dot_streaming__pb2.EchoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.v1.StreamingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamingService(object):
    """StreamingService is a gRPC service to demonstrate different types of streaming.
    """

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/streaming.v1.StreamingService/DownloadFile',
            streaming_dot_v1_dot_streaming__pb2.DownloadFileRequest.SerializeToString,
            streaming_dot_v1_dot_streaming__pb2.DownloadFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/streaming.v1.StreamingService/UploadFile',
            streaming_dot_v1_dot_streaming__pb2.UploadFileRequest.SerializeToString,
            streaming_dot_v1_dot_streaming__pb2.UploadFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Echo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/streaming.v1.StreamingService/Echo',
            streaming_dot_v1_dot_streaming__pb2.EchoRequest.SerializeToString,
            streaming_dot_v1_dot_streaming__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
